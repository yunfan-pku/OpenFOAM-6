# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VLE')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VLE')
    _VLE = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VLE', [dirname(__file__)])
        except ImportError:
            import _VLE
            return _VLE
        try:
            _mod = imp.load_module('_VLE', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VLE = swig_import_helper()
    del swig_import_helper
else:
    import _VLE
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VLE.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VLE.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VLE.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VLE.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VLE.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VLE.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VLE.SwigPyIterator_copy(self)

    def next(self):
        return _VLE.SwigPyIterator_next(self)

    def __next__(self):
        return _VLE.SwigPyIterator___next__(self)

    def previous(self):
        return _VLE.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VLE.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VLE.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VLE.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VLE.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VLE.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VLE.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VLE.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VLE.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VLE.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VLE.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VLE.DoubleVector___bool__(self)

    def __len__(self):
        return _VLE.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VLE.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VLE.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VLE.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VLE.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VLE.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VLE.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VLE.DoubleVector_pop(self)

    def append(self, x):
        return _VLE.DoubleVector_append(self, x)

    def empty(self):
        return _VLE.DoubleVector_empty(self)

    def size(self):
        return _VLE.DoubleVector_size(self)

    def swap(self, v):
        return _VLE.DoubleVector_swap(self, v)

    def begin(self):
        return _VLE.DoubleVector_begin(self)

    def end(self):
        return _VLE.DoubleVector_end(self)

    def rbegin(self):
        return _VLE.DoubleVector_rbegin(self)

    def rend(self):
        return _VLE.DoubleVector_rend(self)

    def clear(self):
        return _VLE.DoubleVector_clear(self)

    def get_allocator(self):
        return _VLE.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VLE.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VLE.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _VLE.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VLE.DoubleVector_push_back(self, x)

    def front(self):
        return _VLE.DoubleVector_front(self)

    def back(self):
        return _VLE.DoubleVector_back(self)

    def assign(self, n, x):
        return _VLE.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VLE.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VLE.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VLE.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VLE.DoubleVector_capacity(self)
    __swig_destroy__ = _VLE.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _VLE.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VLE.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VLE.StringVector___nonzero__(self)

    def __bool__(self):
        return _VLE.StringVector___bool__(self)

    def __len__(self):
        return _VLE.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VLE.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VLE.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VLE.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VLE.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VLE.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VLE.StringVector___setitem__(self, *args)

    def pop(self):
        return _VLE.StringVector_pop(self)

    def append(self, x):
        return _VLE.StringVector_append(self, x)

    def empty(self):
        return _VLE.StringVector_empty(self)

    def size(self):
        return _VLE.StringVector_size(self)

    def swap(self, v):
        return _VLE.StringVector_swap(self, v)

    def begin(self):
        return _VLE.StringVector_begin(self)

    def end(self):
        return _VLE.StringVector_end(self)

    def rbegin(self):
        return _VLE.StringVector_rbegin(self)

    def rend(self):
        return _VLE.StringVector_rend(self)

    def clear(self):
        return _VLE.StringVector_clear(self)

    def get_allocator(self):
        return _VLE.StringVector_get_allocator(self)

    def pop_back(self):
        return _VLE.StringVector_pop_back(self)

    def erase(self, *args):
        return _VLE.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _VLE.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VLE.StringVector_push_back(self, x)

    def front(self):
        return _VLE.StringVector_front(self)

    def back(self):
        return _VLE.StringVector_back(self)

    def assign(self, n, x):
        return _VLE.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VLE.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VLE.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VLE.StringVector_reserve(self, n)

    def capacity(self):
        return _VLE.StringVector_capacity(self)
    __swig_destroy__ = _VLE.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _VLE.StringVector_swigregister
StringVector_swigregister(StringVector)

class solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, solver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _VLE.solver_path_set
    __swig_getmethods__["path"] = _VLE.solver_path_get
    if _newclass:
        path = _swig_property(_VLE.solver_path_get, _VLE.solver_path_set)
    __swig_setmethods__["P"] = _VLE.solver_P_set
    __swig_getmethods__["P"] = _VLE.solver_P_get
    if _newclass:
        P = _swig_property(_VLE.solver_P_get, _VLE.solver_P_set)
    __swig_setmethods__["T"] = _VLE.solver_T_set
    __swig_getmethods__["T"] = _VLE.solver_T_get
    if _newclass:
        T = _swig_property(_VLE.solver_T_get, _VLE.solver_T_set)
    __swig_setmethods__["X"] = _VLE.solver_X_set
    __swig_getmethods__["X"] = _VLE.solver_X_get
    if _newclass:
        X = _swig_property(_VLE.solver_X_get, _VLE.solver_X_set)
    __swig_setmethods__["specie"] = _VLE.solver_specie_set
    __swig_getmethods__["specie"] = _VLE.solver_specie_get
    if _newclass:
        specie = _swig_property(_VLE.solver_specie_get, _VLE.solver_specie_set)
    __swig_setmethods__["s"] = _VLE.solver_s_set
    __swig_getmethods__["s"] = _VLE.solver_s_get
    if _newclass:
        s = _swig_property(_VLE.solver_s_get, _VLE.solver_s_set)
    __swig_setmethods__["dict"] = _VLE.solver_dict_set
    __swig_getmethods__["dict"] = _VLE.solver_dict_get
    if _newclass:
        dict = _swig_property(_VLE.solver_dict_get, _VLE.solver_dict_set)

    def update(self):
        return _VLE.solver_update(self)
    __swig_setmethods__["PR"] = _VLE.solver_PR_set
    __swig_getmethods__["PR"] = _VLE.solver_PR_get
    if _newclass:
        PR = _swig_property(_VLE.solver_PR_get, _VLE.solver_PR_set)

    def __init__(self, arg2):
        this = _VLE.new_solver(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VLE.delete_solver
    __del__ = lambda self: None

    def solve(self, flag):
        return _VLE.solver_solve(self, flag)
    __swig_setmethods__["vaporfra"] = _VLE.solver_vaporfra_set
    __swig_getmethods__["vaporfra"] = _VLE.solver_vaporfra_get
    if _newclass:
        vaporfra = _swig_property(_VLE.solver_vaporfra_get, _VLE.solver_vaporfra_set)

    def density(self):
        return _VLE.solver_density(self)

    def Z(self):
        return _VLE.solver_Z(self)

    def twophase(self, rho, lt, rt):
        return _VLE.solver_twophase(self, rho, lt, rt)
    __swig_setmethods__["equalconstant"] = _VLE.solver_equalconstant_set
    __swig_getmethods__["equalconstant"] = _VLE.solver_equalconstant_get
    if _newclass:
        equalconstant = _swig_property(_VLE.solver_equalconstant_get, _VLE.solver_equalconstant_set)
    __swig_setmethods__["comp_liq"] = _VLE.solver_comp_liq_set
    __swig_getmethods__["comp_liq"] = _VLE.solver_comp_liq_get
    if _newclass:
        comp_liq = _swig_property(_VLE.solver_comp_liq_get, _VLE.solver_comp_liq_set)
    __swig_setmethods__["comp_gas"] = _VLE.solver_comp_gas_set
    __swig_getmethods__["comp_gas"] = _VLE.solver_comp_gas_get
    if _newclass:
        comp_gas = _swig_property(_VLE.solver_comp_gas_get, _VLE.solver_comp_gas_set)
solver_swigregister = _VLE.solver_swigregister
solver_swigregister(solver)

class solver_new(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, solver_new, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, solver_new, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _VLE.solver_new_path_set
    __swig_getmethods__["path"] = _VLE.solver_new_path_get
    if _newclass:
        path = _swig_property(_VLE.solver_new_path_get, _VLE.solver_new_path_set)
    __swig_setmethods__["dict"] = _VLE.solver_new_dict_set
    __swig_getmethods__["dict"] = _VLE.solver_new_dict_get
    if _newclass:
        dict = _swig_property(_VLE.solver_new_dict_get, _VLE.solver_new_dict_set)
    __swig_setmethods__["species"] = _VLE.solver_new_species_set
    __swig_getmethods__["species"] = _VLE.solver_new_species_get
    if _newclass:
        species = _swig_property(_VLE.solver_new_species_get, _VLE.solver_new_species_set)
    __swig_setmethods__["thermoDict"] = _VLE.solver_new_thermoDict_set
    __swig_getmethods__["thermoDict"] = _VLE.solver_new_thermoDict_get
    if _newclass:
        thermoDict = _swig_property(_VLE.solver_new_thermoDict_get, _VLE.solver_new_thermoDict_set)
    __swig_setmethods__["thermoDictM"] = _VLE.solver_new_thermoDictM_set
    __swig_getmethods__["thermoDictM"] = _VLE.solver_new_thermoDictM_get
    if _newclass:
        thermoDictM = _swig_property(_VLE.solver_new_thermoDictM_get, _VLE.solver_new_thermoDictM_set)
    __swig_setmethods__["thermo"] = _VLE.solver_new_thermo_set
    __swig_getmethods__["thermo"] = _VLE.solver_new_thermo_get
    if _newclass:
        thermo = _swig_property(_VLE.solver_new_thermo_get, _VLE.solver_new_thermo_set)
    __swig_setmethods__["speciesData"] = _VLE.solver_new_speciesData_set
    __swig_getmethods__["speciesData"] = _VLE.solver_new_speciesData_get
    if _newclass:
        speciesData = _swig_property(_VLE.solver_new_speciesData_get, _VLE.solver_new_speciesData_set)
    __swig_setmethods__["P"] = _VLE.solver_new_P_set
    __swig_getmethods__["P"] = _VLE.solver_new_P_get
    if _newclass:
        P = _swig_property(_VLE.solver_new_P_get, _VLE.solver_new_P_set)
    __swig_setmethods__["T"] = _VLE.solver_new_T_set
    __swig_getmethods__["T"] = _VLE.solver_new_T_get
    if _newclass:
        T = _swig_property(_VLE.solver_new_T_get, _VLE.solver_new_T_set)
    __swig_setmethods__["m_specie"] = _VLE.solver_new_m_specie_set
    __swig_getmethods__["m_specie"] = _VLE.solver_new_m_specie_get
    if _newclass:
        m_specie = _swig_property(_VLE.solver_new_m_specie_get, _VLE.solver_new_m_specie_set)

    def __init__(self, arg2):
        this = _VLE.new_solver_new(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _VLE.solver_new_reset(self)
    __swig_destroy__ = _VLE.delete_solver_new
    __del__ = lambda self: None
    __swig_setmethods__["vaporfra"] = _VLE.solver_new_vaporfra_set
    __swig_getmethods__["vaporfra"] = _VLE.solver_new_vaporfra_get
    if _newclass:
        vaporfra = _swig_property(_VLE.solver_new_vaporfra_get, _VLE.solver_new_vaporfra_set)

    def rho(self):
        return _VLE.solver_new_rho(self)

    def drhodT(self):
        return _VLE.solver_new_drhodT(self)

    def drhodP(self):
        return _VLE.solver_new_drhodP(self)

    def drhodXi(self, arg2):
        return _VLE.solver_new_drhodXi(self, arg2)

    def dZdXi(self, arg2):
        return _VLE.solver_new_dZdXi(self, arg2)

    def drhodP_HP(self):
        return _VLE.solver_new_drhodP_HP(self)

    def drhoPdH_HP(self):
        return _VLE.solver_new_drhoPdH_HP(self)

    def drhoPdP_HP(self):
        return _VLE.solver_new_drhoPdP_HP(self)

    def drhoPdXi_HP(self, arg2):
        return _VLE.solver_new_drhoPdXi_HP(self, arg2)

    def drhoPdH_HsP(self):
        return _VLE.solver_new_drhoPdH_HsP(self)

    def drhoPdP_HsP(self):
        return _VLE.solver_new_drhoPdP_HsP(self)

    def drhoPdXi_HsP(self, arg2):
        return _VLE.solver_new_drhoPdXi_HsP(self, arg2)

    def drhoPdXHP_HsP(self):
        return _VLE.solver_new_drhoPdXHP_HsP(self)

    def dTdXi_HsP(self, arg2):
        return _VLE.solver_new_dTdXi_HsP(self, arg2)

    def dvfdH_HP(self):
        return _VLE.solver_new_dvfdH_HP(self)

    def dvfdP_HP(self):
        return _VLE.solver_new_dvfdP_HP(self)

    def dvfdXi_HP(self, arg2):
        return _VLE.solver_new_dvfdXi_HP(self, arg2)

    def dvfdH_HsP(self):
        return _VLE.solver_new_dvfdH_HsP(self)

    def dvfdP_HsP(self):
        return _VLE.solver_new_dvfdP_HsP(self)

    def dvfdXi_HsP(self, arg2):
        return _VLE.solver_new_dvfdXi_HsP(self, arg2)

    def drhodXi_HP(self, arg2):
        return _VLE.solver_new_drhodXi_HP(self, arg2)

    def Gibbs_single(self):
        return _VLE.solver_new_Gibbs_single(self)

    def G_departure_Mole(self):
        return _VLE.solver_new_G_departure_Mole(self)

    def Gideal_Mole(self):
        return _VLE.solver_new_Gideal_Mole(self)

    def G_Mole(self):
        return _VLE.solver_new_G_Mole(self)

    def solveTPD_BFGS(self):
        return _VLE.solver_new_solveTPD_BFGS(self)

    def A_single(self):
        return _VLE.solver_new_A_single(self)

    def z_single(self):
        return _VLE.solver_new_z_single(self)

    def muideal_Mole(self, arg2):
        return _VLE.solver_new_muideal_Mole(self, arg2)

    def Gideal(self):
        return _VLE.solver_new_Gideal(self)

    def Z(self, *args):
        return _VLE.solver_new_Z(self, *args)

    def TPn_flash(self):
        return _VLE.solver_new_TPn_flash(self)

    def TPn_flash_New(self):
        return _VLE.solver_new_TPn_flash_New(self)

    def TPn_flash_New_TPD(self):
        return _VLE.solver_new_TPn_flash_New_TPD(self)

    def dZdT(self, *args):
        return _VLE.solver_new_dZdT(self, *args)

    def A(self):
        return _VLE.solver_new_A(self)

    def dAdT(self):
        return _VLE.solver_new_dAdT(self)

    def B(self):
        return _VLE.solver_new_B(self)

    def dBdT(self):
        return _VLE.solver_new_dBdT(self)

    def Ha(self):
        return _VLE.solver_new_Ha(self)

    def Hs(self):
        return _VLE.solver_new_Hs(self)

    def Ha_singlePhase(self, arg2, arg3):
        return _VLE.solver_new_Ha_singlePhase(self, arg2, arg3)

    def dHadT_singlePhase(self, arg2, arg3):
        return _VLE.solver_new_dHadT_singlePhase(self, arg2, arg3)

    def Hideal(self, arg2):
        return _VLE.solver_new_Hideal(self, arg2)

    def dHidealdT(self, arg2):
        return _VLE.solver_new_dHidealdT(self, arg2)

    def Cp(self):
        return _VLE.solver_new_Cp(self)

    def dHadP(self):
        return _VLE.solver_new_dHadP(self)

    def dHadXi(self, arg2):
        return _VLE.solver_new_dHadXi(self, arg2)

    def dHsdXi(self, arg2):
        return _VLE.solver_new_dHsdXi(self, arg2)

    def W(self, *args):
        return _VLE.solver_new_W(self, *args)

    def T_HsP(self, h, p, T0):
        return _VLE.solver_new_T_HsP(self, h, p, T0)

    def Ln_fugacityCoefficient(self, *args):
        return _VLE.solver_new_Ln_fugacityCoefficient(self, *args)

    def ddT_Ln_fugacityCoefficient(self, arg2):
        return _VLE.solver_new_ddT_Ln_fugacityCoefficient(self, arg2)

    def ddxi_Ln_fugacityCoefficient(self, arg2, arg3):
        return _VLE.solver_new_ddxi_Ln_fugacityCoefficient(self, arg2, arg3)

    def dvidT(self):
        return _VLE.solver_new_dvidT(self)

    def dvidP(self):
        return _VLE.solver_new_dvidP(self)

    def dvidXi(self, arg2):
        return _VLE.solver_new_dvidXi(self, arg2)

    def fugacityCoefficient(self, arg2, arg3):
        return _VLE.solver_new_fugacityCoefficient(self, arg2, arg3)

    def dTdP_HP(self):
        return _VLE.solver_new_dTdP_HP(self)

    def dTdH_HP(self):
        return _VLE.solver_new_dTdH_HP(self)

    def dTdXi_HP(self, arg2):
        return _VLE.solver_new_dTdXi_HP(self, arg2)
    __swig_setmethods__["equalconstant"] = _VLE.solver_new_equalconstant_set
    __swig_getmethods__["equalconstant"] = _VLE.solver_new_equalconstant_get
    if _newclass:
        equalconstant = _swig_property(_VLE.solver_new_equalconstant_get, _VLE.solver_new_equalconstant_set)
    __swig_setmethods__["comp_liq"] = _VLE.solver_new_comp_liq_set
    __swig_getmethods__["comp_liq"] = _VLE.solver_new_comp_liq_get
    if _newclass:
        comp_liq = _swig_property(_VLE.solver_new_comp_liq_get, _VLE.solver_new_comp_liq_set)
    __swig_setmethods__["comp_gas"] = _VLE.solver_new_comp_gas_set
    __swig_getmethods__["comp_gas"] = _VLE.solver_new_comp_gas_get
    if _newclass:
        comp_gas = _swig_property(_VLE.solver_new_comp_gas_get, _VLE.solver_new_comp_gas_set)
    __swig_setmethods__["comp"] = _VLE.solver_new_comp_set
    __swig_getmethods__["comp"] = _VLE.solver_new_comp_get
    if _newclass:
        comp = _swig_property(_VLE.solver_new_comp_get, _VLE.solver_new_comp_set)
    __swig_setmethods__["ret"] = _VLE.solver_new_ret_set
    __swig_getmethods__["ret"] = _VLE.solver_new_ret_get
    if _newclass:
        ret = _swig_property(_VLE.solver_new_ret_get, _VLE.solver_new_ret_set)
solver_new_swigregister = _VLE.solver_new_swigregister
solver_new_swigregister(solver_new)


def fun_my(n):
    return _VLE.fun_my(n)
fun_my = _VLE.fun_my
# This file is compatible with both classic and new-style classes.


